// MIT License
//
// Copyright(c) 2017 ForensicTools
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in 
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//

// Authors:	Joseph Bartelmo   <joebartelmo@gmail.com>
//			Robert Suter      <rxs2165@g.rit.edu>
//			Andrew Botsehagow <abotschagow@gmail.com>
#include "stdafx.h"

#include <string>
#include <vector>
#include <fstream>
#include <streambuf>
#include <cstdio>
#include <Windows.h>
#include <winreg.h>
#include <Shlwapi.h>

#include "consts.h"
#include "registry.h"

#define SUBKEY_RUN "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
#define SUBKEY_RUNONCE "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce"
#define BASE_NAME "Forensics"

std::vector<std::string> get_value_names(HKEY key)
// key must be already open key
{
	std::vector<std::string> list;
	long index = 0;
	int cont = 1;
	while (cont) {
		wchar_t buffer[512];
		unsigned long bufsize = _countof(buffer);
		long result = RegEnumValue(
			key,
			index,
			buffer,
			&bufsize,
			NULL,
			NULL,
			NULL, // no need for data in this case
			NULL
		);

		if (result != ERROR_SUCCESS && result != ERROR_MORE_DATA) {
			if (result == ERROR_NO_MORE_ITEMS) cont = 0;
			else {
				char *err_buffer;
				FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ALLOCATE_BUFFER, NULL, result, 0, (LPTSTR)&err_buffer, 0, NULL);
				printf("Error reading names. Error=%s\n", err_buffer);
				delete err_buffer;
			}
		}
		else {
			std::wstring name = std::wstring(buffer);
			list.emplace_back(ARM::ws2s(name));
			index += 1;
		}
	}

	return list;
}

std::string get_next_name(const std::vector<std::string>& list)
{
	std::string base = std::string(BASE_NAME);
	int max_num = -1;
	unsigned int i;
	for (i = 0; i < list.size(); i++) {
		std::string name = list.at(i);
		if (base.compare(0, base.length(), name, 0, base.length()) == 0) {
			std::string num_str = name.substr(base.length());
			int num = strtol(num_str.c_str(), NULL, 10);
			if (num > max_num) max_num = num;
		}
	}

	int new_num = max_num + 1;
	char num_buffer[128];
	_itoa_s(new_num, num_buffer, 10);
	base.append(num_buffer);
	return base;
}

namespace ARM {

	bool write_to_registry_entry(std::string key_name, std::string file_name)
	{
		std::ifstream data_stream(file_name);
		if (!data_stream.good()) {
			printf("Failed to open data file\n");
			return false;
		}
		std::string data((std::istreambuf_iterator<char>(data_stream)),
			std::istreambuf_iterator<char>());
		data_stream.close();
		HKEY key;
		auto w_key = ARM::s2ws(key_name).c_str();
		// First open subkey
		long result = RegOpenKeyEx(
			HKEY_CURRENT_USER,
			w_key,
			0,
			KEY_ALL_ACCESS,
			&key
		);

		// check if open successful
		if (result != ERROR_SUCCESS) {
			printf("Error opening registry key. Error=%s\n");
			return false;
		}

		std::vector<std::string> name_list = get_value_names(key);
		if (name_list.size() == 0) {
			return false;
		}

		std::string new_name = get_next_name(name_list);
		auto wstr_name = ARM::s2ws(new_name).c_str();
		BYTE* b_data = (BYTE*)data.c_str();
		result = RegSetValueEx(
			key,
			wstr_name,
			0,
			REG_SZ,
			b_data,
			data.size() + 1
		);

		if (result != ERROR_SUCCESS) {
			printf("Error writing data. Error=%s\n");
			return false;
		}

		// close key
		result = RegCloseKey(key);
		// check if close successful
		if (result != ERROR_SUCCESS) {
			printf("Error closing registry key. Error=%s\n");
			return false;
		}
		return true;
	}

	bool write_to_run(std::string file_name)
	{
		std::string key = std::string(SUBKEY_RUN);
		return ARM::write_to_registry_entry(key, file_name);
	}

	bool write_to_runonce(std::string file_name)
	{
		std::string key = std::string(SUBKEY_RUNONCE);
		return ARM::write_to_registry_entry(key, file_name);
	}

}