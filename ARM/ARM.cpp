// MIT License
//
// Copyright(c) 2017 ForensicTools
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in 
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//

// Authors:	Joseph Bartelmo   <joebartelmo@gmail.com>
//			Robert Suter      <rxs2165@g.rit.edu>
//			Andrew Botsehagow <abotschagow@gmail.com>
#include "stdafx.h"
#include <stdio.h>
#include <iostream>
#include <string>
#include <ctime>
#include <fstream>

#include "filesystem.h"
#include "fuzzyhash.h"
#include "slackspace.h"

#define BLOCK_SIZE 512

using namespace std;

/// <summary>
/// Prints usage statement given the name of the executable and a special
/// message
/// </summary>
/// <param name="filename">Name of this executable</param>
/// <param name="msg">Special message to append to top</param>
/// <returns>EXIT_FAILURE</returns>
int usage(string filename, string msg) {
	if (msg.length() != 0) {
		cerr << "Error: " << msg << endl;
	}
	cerr << "usage: " << filename << " <options>" << endl
		<< "\t<options>: integer value (or set of integer values) described"
		<< "below" << endl
		<< "\t\t1: " << "Antifuzzy hash this file" << endl
		<< "\t\t2: " << "Store in hidden locations on file system" << endl
		<< "\t\t3: " << "Store in slack space on file system" << endl
		<< "\t\t4: " << "Store in unallocated space" << endl
		<< "\t\t5: " << "Store in registry" << endl
		<< "\t\t6: " << "Store encrypted (arbitrary key generation)" 
		<< endl
		<< "\t\t7: " << "Store in alternate data streams" << endl
		<< "\t\t8: " << "All optinos" << endl;

	cerr << endl << "Examples:" << endl <<
		filename << " 1" << endl <<
		filename << " 7432" << endl <<
		filename << " 8" << endl <<
		filename << " 123" << endl;
#ifdef DEBUG
	cin << "Prese any key to exit...";
#endif
	return EXIT_FAILURE;
}

/// <summary>
/// Method decomposition for usage above.
/// </summary>
/// <param name="filename">Name of this executable</param>
/// <returns>EXIT_FAILURE</returns>
int usage(string filename) { 
	return usage(filename, "");
}

/// <summary>
/// Grabs current date/time as a string
/// </summary>
/// <returns>String representation of current system date/time</returns>
string get_time_string() {
	time_t rawtime;
	struct tm * timeinfo = new tm();
	char buffer[80];

	time(&rawtime);
	localtime_s(timeinfo, &rawtime);

	strftime(buffer, sizeof(buffer), "%d-%m-%Y %I:%M:%S", timeinfo);
	string str(buffer);

	return str;
}

/// <summary>
/// Main entry point for the ARM application
/// </summary>
/// <param name="argc">Argument count</param>
/// <param name="argv">Argument variables</param>
/// <returns>EXIT_SUCCESS | EXIT_FAILURE</returns>
int main(int argc, char* argv[]) {
	if (argc != 2) {
		return usage(argv[0]);
	}

	ofstream output("ARM Malware Report " + get_time_string());
	string filename = string(argv[0]);
	for (char* options = argv[1]; *options != '\0'; options++) {
		vector<string> locations; 
		switch (*options) {
		case '1':
			cout << "Performing Anti fuzzy hash of md5 algorithm..." << endl;
			//ARM::spoof_fuzzy_hash_md5(filename, BLOCK_SIZE);
			cout << "Performing Anti fuzzy hash of sha1 algorithm..." << endl;
			//ARM::spoof_fuzzy_hash_sha1(filename, BLOCK_SIZE);
			break;
		case '2':
			cout << "Attempting to propagate to hidden locations on the file system..." << endl;
			//locations = ARM::propegate_to_secret_locations(filename);
			output << "File System Locations:" << endl;
			for (string location : locations) {
				output << location << endl;
			}
			break;
		case '3':
			cout << "Attempting to obscure a version of this program in slackspace" << endl;
			//locations = ARM::write_to_slack_space(filename);
			output << "Slack Space Locations:" << endl;
			for (string location : locations) {
				output << location << endl;
			}
			break;
		case '4':
			//tbd (and here down)
			break;
		case '5':
			break;
		case '6':
			break;
		case '7':
			break;
		case '8':
			return main(2, new char* [1]{ "1234567" });
		default:
			return usage(argv[0], "Unknown argument supplied");
		}
		output << ARM::OUTPUT_DELIM;
	}

	output.close();

#ifdef DEBUG
	cin << "Prese any key to exit...";
#endif
	return EXIT_SUCCESS;
}
