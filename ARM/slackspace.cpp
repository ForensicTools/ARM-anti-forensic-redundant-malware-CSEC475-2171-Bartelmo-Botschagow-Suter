// MIT License
//
// Copyright(c) 2017 ForensicTools
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in 
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//

// Authors:	Joseph Bartelmo   <joebartelmo@gmail.com>
//			Robert Suter      <rxs2165@g.rit.edu>
//			Andrew Botsehagow <abotschagow@gmail.com>

#include "stdafx.h"
#include <string>
#include <vector>
#include <cstdio>
#include <Windows.h>
#include <Winbase.h>
//#include <FileAPI.h> // uncomment on windows versions above 7
#include <Shlwapi.h>

#include "slackspace.h"
#include "consts.h"

#define BLOCK_SIZE 4096
#define START_DIRECTORY "testing"
// START_DIRECTORY is the directory to start searching for files to write to the slack space of.
// setting this to root or 'C:' will search entire file system

int ARM::get_file_slack_size(std::string file_name)
{
	HANDLE file = CreateFile(
					ARM::s2ws(file_name).c_str(),
					GENERIC_READ,
					0,
					NULL,
					OPEN_EXISTING,
					FILE_ATTRIBUTE_NORMAL,
					NULL
	);

	if (file == INVALID_HANDLE_VALUE) {
		printf("Error opening file\n");
		return 0;
	}

	long size_low = GetFileSize(file, NULL);

	int slack_bytes = BLOCK_SIZE - (size_low % BLOCK_SIZE);

	CloseHandle(file);

	return slack_bytes;
}

std::vector<std::string> find_slack_files(std::string directory, int file_size)
{
	std::string start(directory);
	directory.append("\\*");

	std::vector<std::string> files = std::vector<std::string>();
	int space_left = file_size;

	WIN32_FIND_DATA data;
	HANDLE handle = FindFirstFile(ARM::s2ws(directory).c_str(), &data);
	if (handle == INVALID_HANDLE_VALUE) {
		return std::vector<std::string>();
	}
	if (!(data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)) { // file is not a directory
		int space = ARM::get_file_slack_size(start + "\\" + ARM::ws2s(data.cFileName));
		if (space > 0) {
			files.push_back(start + "\\" + ARM::ws2s(data.cFileName));
			space_left -= space;
		}
	}

	BOOL more = 1;
	while(more && space_left > 0) {

		if (!(data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)) { // file is not a directory
			int space = ARM::get_file_slack_size(start + "\\" + ARM::ws2s(data.cFileName));
			if (space > 0) {
				files.push_back(start + "\\" + ARM::ws2s(data.cFileName));
				space_left -= space;
			}
		}

		more = FindNextFile(handle, &data);
	}

	if (space_left > 0) { // not enough space
		return std::vector<std::string>();
	}
	else {
		return files;
	}
}

int write_to_slack_single(std::string file_name, char *buffer, int size)
// write buffer to slack space of single file
{
	HANDLE file = CreateFile(
						ARM::s2ws(file_name).c_str(),
						GENERIC_READ | GENERIC_WRITE,
						0,
						NULL,
						OPEN_EXISTING,
						FILE_ATTRIBUTE_NORMAL,
						NULL
	);

	if (file == INVALID_HANDLE_VALUE) {
		printf("Error opening file\n");
		return -1;
	}

	LARGE_INTEGER large_zero;
	large_zero.QuadPart = 0;
	LARGE_INTEGER large_neg_size;
	large_neg_size.QuadPart = -1*size;

	BOOL result = SetFilePointerEx(
					file,
					large_zero,
					NULL,
					FILE_END
	);


	unsigned long written;

	result = WriteFile(
					file,
					buffer,
					size,
					&written,
					NULL
	);

	result = SetFilePointerEx(
					file,
					large_neg_size,
					NULL,
					FILE_END
	);

	result = SetEndOfFile(file);

	if (result) {
		return 0;
	}
	else return -1;
}

std::vector<std::string> ARM::write_to_slack_space(std::string file_name)
// returns empty vector on failure
{
	FILE *data = fopen(file_name.c_str(), "r");
	if (data == NULL) {
		printf("Failed to open data file\n");
		return std::vector<std::string>();
	}

	fseek(data, 0L, SEEK_END);
	int data_size = ftell(data);
	rewind(data);

	std::vector<std::string> files = find_slack_files(std::string(START_DIRECTORY), data_size);
	if (files.size() <= 0) {
		printf("Error - not enough room in slack space for file\n");
		return std::vector<std::string>();
	}
	else {
		// actually write the file
		unsigned int i;
		int remaining = data_size;
		for (i = 0; i < files.size(); i++) {
			int slack_space = ARM::get_file_slack_size(files[i]);
			if (slack_space > remaining) slack_space = remaining;
			char *buffer = (char *)malloc(slack_space);
			fread(buffer, slack_space, 1, data);
			write_to_slack_single(files[i], buffer, slack_space);
			free(buffer);
			remaining -= slack_space;
		}

		return files;
	}

}
