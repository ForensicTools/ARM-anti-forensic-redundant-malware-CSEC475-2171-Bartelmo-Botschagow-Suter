// MIT License
//
// Copyright(c) 2017 ForensicTools
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in 
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//

// Authors:	Joseph Bartelmo   <joebartelmo@gmail.com>
//			Robert Suter      <rxs2165@g.rit.edu>
//			Andrew Botsehagow <abotschagow@gmail.com>
#include "stdafx.h"
#include <vector>
#include <windows.h>
#include "filesystem.h"
#include <string.h>
#include "md5.h"
#include "sha1.hpp"
#include <fstream>
#include <functional>

#define UPX_LOC "upx.exe"

//
// A little bit of method decomp, this just reads a file block by block 
// and executes some arbitrary function over those blocks
//
std::vector<std::string> fuzzy_hash(std::string location, int block_size, std::function<string(char*)> func) {
	std::vector<std::string> toReturn;
	if (block_size <= 0) {
		return toReturn;
	}
	int read = block_size;
	char* buffer = new char[block_size];
	try {
		std::ifstream file(location, std::ios::binary);
		while (read == block_size) {
			file.read(buffer, sizeof buffer);
			read = file.gcount();

			toReturn.emplace_back(func(buffer));
		}
		file.close();
	}
	catch (const std::exception&) {}

	delete buffer;
	return toReturn;
}

namespace ARM {
	/// <summary>
	/// Performs a fuzzy hash algorithm over the target data
	/// </summary>
	/// <param name="char*">Location of file to analyze</param>
	/// <param name="int">Block size to hash</param>
	/// <returns>List of hashes associated with the given file (fuzzy)</returns>
	std::vector<std::string> fuzzy_hash_md5(std::string location, int block_size) {
		return fuzzy_hash(location, block_size, [](char* data) -> std::string {
			MD5 md5(data);
			return md5.toStr();
		});
	}

	/// <summary>
	/// Performs a fuzzy hash algorithm over the target data
	/// </summary>
	/// <param name="char*">Location of file to analyze</param>
	/// <param name="int">Block size to hash</param>
	/// <returns>List of hashes associated with the given file (fuzzy)</returns>
	std::vector<std::string> fuzzy_hash_sha1(std::string location, int block_size) {
		return fuzzy_hash(location, block_size, [](char* data) -> std::string {
			SHA1 sha1;
			sha1.update(data);
			return sha1.final();
		});
	}

	/// <summary>
	/// Performs an antifuzzy hash algorithm over the target data
	/// </summary>
	/// <param name="char*">Data to analyze</param>
	/// <param name="int">Block size to hash</param>
	/// <returns>New file to write that evades fuzzy hashing</returns>
	bool spoof_fuzzy_hash(std::string location) {
		try {
			std::string command = string(UPX_LOC) + " " + location;
			return std::system(command.c_str()) == 0;
		}
		catch (const std::exception&) {
			return false;
		}

		return true;
	}
}